server.port=8080

#---------------------------mybatis start----------------------------------
#mybatis配置
mybatis.config-location=classpath:mybatis/sqlmap-config.xml
mybatis.mapper-locations=classpath:mybatis/read/**/*.xml,classpath:mybatis/write/**/*.xml
mybatis.type-aliases-package=com.example.demo.model.po
#---------------------------mybatis end----------------------------------


#---------------------------dubbo start-----------------------------------
# dubbo配置
spring.dubbo.appname=demosoa
spring.dubbo.protocol=dubbo
spring.dubbo.registry=zookeeper://remote.zookeeperserver.com:2181
spring.dubbo.port=20801
spring.dubbo.group=test
spring.dubbo.version=1.0.0
#---------------------------dubbo end-----------------------------------

##------------------------------datasource start------------------------------
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.readSize=2
# 主数据源，默认的
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/short_article?characterEncoding=utf8&useSSL=true
spring.datasource.username=root
spring.datasource.password=root

# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20

# 从数据源
spring.slave1.driver-class-name=com.mysql.jdbc.Driver
spring.slave1.url=jdbc:mysql://127.0.0.1:3306/short_article?characterEncoding=utf8&useSSL=true
spring.slave1.username=root
spring.slave1.password=root
spring.slave1.initialSize=5
spring.slave1.minIdle=5
spring.slave1.maxActive=20
# 配置获取连接等待超时的时间
spring.slave1.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.slave1.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.slave1.minEvictableIdleTimeMillis=300000
spring.slave1.validationQuery=SELECT 1 FROM DUAL
spring.slave1.testWhileIdle=true
spring.slave1.testOnBorrow=false
spring.slave1.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.slave1.poolPreparedStatements=true
spring.slave1.maxPoolPreparedStatementPerConnectionSize=20


spring.slave2.driver-class-name=com.mysql.jdbc.Driver
spring.slave2.url=jdbc:mysql://127.0.0.1:3306/short_article?characterEncoding=utf8&useSSL=true
spring.slave2.username=root
spring.slave2.password=root
spring.slave2.initialSize=5
spring.slave2.minIdle=5
spring.slave2.maxActive=20
# 配置获取连接等待超时的时间
spring.slave2.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.slave2.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.slave2.minEvictableIdleTimeMillis=300000
spring.slave2.validationQuery=SELECT 1 FROM DUAL
spring.slave2.testWhileIdle=true
spring.slave2.testOnBorrow=false
spring.slave2.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.slave2.poolPreparedStatements=true
spring.slave2.maxPoolPreparedStatementPerConnectionSize=20

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.slave.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.slave.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.slave.useGlobalDataSourceStat=true

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.read2.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.read2.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.read2.useGlobalDataSourceStat=true
##------------------------------datasource end------------------------------